%YAML 1.2
---
name: Ledger
file_extensions: [ldg, ledger]
scope: source.ledger

variables:
  date: "\\d{4}[/-]\\d{2}[/-]\\d{2}"
  name_terminator: "(?=  |\\t|$)"
  account_parent: "[^:;]+?(?::|{{name_terminator}})"
  account_children: "[^;]*?{{name_terminator}}"

  label_start: "(?<!^)\\b"
  label_end: "?: ?"
  expenses: "{{label_start}}e(?:xpenses){{label_end}}"
  assets: "{{label_start}}a(?:ssets){{label_end}}"
  liabilities: "{{label_start}}l(?:iabilities){{label_end}}"
  income: "{{label_start}}i(?:ncome){{label_end}}"
  equity: "{{label_start}}equity{{label_end}}"

  commodity: "[a-zA-Z_]+"
  comment_lookahead: "(?=\\s*(;|$))"
  # =?  up front will include the equal sign in amounts for
  # balance assertions and assignments
  amount_common: "\\s*=?\\s*\\(?\\s*\\$?\\s*"
  amount: "{{amount_common}}[ \\d\\.,()+*/$-]+"
  less_than_zero_lookahead: "(?={{amount_common}}-)"
  more_than_zero_lookahead: "(?={{amount_common}}\\d)"

contexts:
  main:
    - match: "^(?=\\s*;;)"
      push: comments_special
    - match: "^(?={{date}})"
      push: top_line

    - match: "^account\\s+.*  .*$"
      scope: invalid
    - match: "^(account\\s+)([a-z]+: ?)([a-z0-9 ]+(?::|$))([^;]*)$"
      captures:
        1: support.class.directive
        2: unscoped.account-name
        3: string.unquoted.top-level
        4: unscoped.account-name
    - match: "^((?:tag|account)\\s+)([^ ;]+)$"
      captures:
        1: support.class.directive
        2: variable.parameter.name
    - match: "^(tag|account)\\s+.*[ ;].*$"
      scope: invalid
      # this will also mark trailing spaces as invalid but that's okay
    - match: "^commodity\\s+[^ ;]+(;|\\s+[^ ;]).*$"
      scope: invalid
    - match: "^(commodity\\s+)([^ ;]+)"
      captures:
        1: support.class.directive
        2: variable.parameter.name
    - match: "^payee\\s+.*(;|  ).*$"
      scope: invalid
    - match: "^payee\\S.*$"
      scope: invalid
    - match: "^(payee\\s+)([^;]+)$"
      captures:
        1: support.class.directive
        2: constant.character.name
    - match: "^(\\s+note\\s+)(.*)$"
      captures:
        1: keyword.sub-directive
        2: comment.comment.note
    - match: "^(\\s+(?:alias|format|default|check|assert)\\s+)(.*)$"
      captures:
        1: keyword.sub-directive
        2: entity.name.function.subdir-value
    - match: "^(P\\s+)({{date}}\\s+)({{commodity}}\\s+)(\\$\\s*-?[\\d\\.,_]+)"
      captures:
        1: keyword.price
        2: variable.parameter.date
        3: support.class.commodity
        4: string.unquoted.amount

    - match: "(?={{expenses}})"
      push: expenses
    - match: "(?={{assets}})"
      push: assets
    - match: "(?={{liabilities}})"
      push: liabilities
    - match: "(?={{income}})"
      push: income
    - match: "(?={{equity}})"
      push: equity

    - include: comments

  assets:
    - match: "({{assets}})({{account_parent}})({{account_children}})"
      captures:
        1: entity.name.function.assets-label
        2: support.class.assets-parent
        3: unscoped.account-name
    - match: "{{less_than_zero_lookahead}}"
      push: money_out
    - match: "{{more_than_zero_lookahead}}"
      push: money_in
    - match: "{{comment_lookahead}}"
      pop: true

  liabilities:
    - match: "({{liabilities}})({{account_parent}})({{account_children}})"
      captures:
        1: message.error.liabilities-label
        2: support.class.liabilities-parent
        3: unscoped.account-name
    - match: "{{less_than_zero_lookahead}}"
      push: money_out
    - match: "{{more_than_zero_lookahead}}"
      push: money_in
    - match: "{{comment_lookahead}}"
      pop: true

  income:
    - match: "({{income}})({{account_parent}})({{account_children}})"
      captures:
        1: entity.name.function.income-label
        2: entity.name.function.income-parent
        3: unscoped.account-name
    - match: "{{less_than_zero_lookahead}}"
      push: money_in
    - match: "{{more_than_zero_lookahead}}"
      push: money_out
    - match: "{{comment_lookahead}}"
      pop: true

  equity:
    - match: "({{equity}})({{account_parent}})({{account_children}})"
      captures:
        1: unscoped.equity-label
        2: unscoped.equity-parent
        3: unscoped.account-name
    - match: "{{less_than_zero_lookahead}}"
      push: money_in
    - match: "{{more_than_zero_lookahead}}"
      push: money_out
    - match: "{{comment_lookahead}}"
      pop: true

  money_in:
    - match: "{{amount}}"
      scope: entity.name.function.money-in
      push: commodity_stuff
    - match: "{{comment_lookahead}}"
      pop: true

  money_out:
    - match: "{{amount}}"
      scope: message.error.money-out
      push: commodity_stuff
    - match: "{{comment_lookahead}}"
      pop: true

  commodity_stuff:
    - match: "({{commodity}}\\s*)?(@\\s*)?({{amount}}[^=;]*)?"
      captures:
        '1': support.class.commodity
        '2': keyword.at
        '3': string.unquoted.amount
    ## the following three matches allowed for the commodity to be highlighted
    ## the same on either side of a balance assertion/assignment, but couldn't
    ## easily figure out how to do the same with old tmLanguage definition,
    ## so have changed this to match and have both definitions pass same tests
    # - match: "{{commodity}}\\s*"
    #   scope: support.class.commodity
    # - match: "@\\s*"
    #   scope: keyword.at
    # - match: "{{amount}}"
    #   scope: string.unquoted.amount
    - match: "{{comment_lookahead}}"
      pop: true

  expenses:
    - match: "({{expenses}})({{account_parent}})({{account_children}})"
      captures:
        1: string.unquoted.expenses-label
        2: string.unquoted.expenses-parent
        3: unscoped.account-name
    - match: "{{less_than_zero_lookahead}}"
      push: expenses_money_in
    - match: "{{more_than_zero_lookahead}}"
      push: expenses_money_out
    - match: "{{comment_lookahead}}"
      pop: true

  expenses_money_in:
    - match: "{{amount}}"
      scope: string.unquoted.money-in
      push: commodity_stuff
    - match: "{{comment_lookahead}}"
      pop: true

  expenses_money_out:
    - match: "{{amount}}"
      scope: variable.parameter.money-out
      push: commodity_stuff
    - match: "{{comment_lookahead}}"
      pop: true

  # "bold" or "header" comment starting with ;;
  # or a scheduler config line
  comments_special:
    - match: "^(\\s*;;\\s*scheduler?)(\\s*;.*)$"
      captures:
        1: keyword.scheduler-config
        2: string.unquoted.scheduler-config
    - match: "^\\s*;;.*\\n"
      scope: string.unquoted.header-bold-comment
    - match: "$"
      pop: true

  comments:
    - match: "(\\s*;.*)(todo)(.*)$"
      captures:
        1: comment.comment
        2: keyword.todo
        3: comment.comment
    - match: "(\\s*;[^:]*?)((?::\\w+:|(?<=:)\\w+:)+)(.*)$"
      captures:
        1: comment.comment
        2: support.class.tag-without-value
        3: comment.comment
      # make payee name in tag be purple as with payee directive
    - match: "(\\s*;\\s*)([Pp]ayee: )(.*)$"
      captures:
        1: comment.comment
        2: support.class.tag-key
        3: constant.character.tag-value-payee
    - match: "(\\s*;\\s*)(\\w+: )(.*)$"
      captures:
        1: comment.comment
        2: support.class.tag-key
        3: string.unquoted.tag-value
    - match: "\\s*;.*$"
      scope: comment.comment

  top_line:
    - match: "({{date}}\\s+)([!*]\\s*)?"
      captures:
        1: variable.parameter.date
    - match: "\\s*(\\([^)]*\\))\\s*"
      captures:
        1: string.quoted.transacton-number
      # comes before payee regex so it won't keep matching
    - match: "{{name_terminator}}"
      pop: true
    - match: ".*?{{name_terminator}}"
      scope: constant.character.payee

